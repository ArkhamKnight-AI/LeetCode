struct TreeNode {
	int val;
	TreeNode* left;
	TreeNode* right;
	TreeNode(int v) : val(v), left(nullptr), right(nullptr) {}
};

//递归写法
int process(TreeNode* root) {
	if (!root) return 0;

	int leftHeight = process(root->left);
	int rightHeight = process(root->right);

	if (root->left && !root->right) {
		return leftHeight + 1;
	}

	if (!root->left && root->right) {
		return rightHeight + 1;
	}

	return min(leftHeight, rightHeight) + 1;
}

int minDepth(TreeNode* root) {
	if (!root) return 0;
	return minDepth(root);
}

//非递归写法
int minDepth(TreeNode* root) {
	if (!root) return 0;
	
	queue<TreeNode*> q;
	int depth = 0;
	q.push(root);

	while (!q.empty()) {
		int size = q.size();
		depth++;

		for (int i = 0; i < size; i++) {
			TreeNode* cur = q.front();
			q.pop();
			if (cur->left) q.push(cur->left);
			if (cur->right) q.push(cur->right);
			if (!cur->left && !cur->right) return depth;
		}
	}
	return depth;
}
