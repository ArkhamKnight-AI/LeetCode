注意：
k=0的情况要单独进行讨论

#include<iostream>
#include<vector>
#include<string>
#include<set>
#include<unordered_map>
using namespace std;

//vector<pair<int, int>> findPairs(vector<int>& arr, int k) {
//	if (arr.size() < 2) return {};
//
//	set<int> s;
//	for (int i = 0; i < arr.size(); i++) {
//		s.insert(arr[i]);
//	}
//
//	vector<pair<int, int>> res;
//	for (set<int>::iterator it = s.begin(); it != s.end(); it++) {
//		if (s.find(*it + k) != s.end()) {
//			res.push_back(pair<int, int>(*it, *it + k));
//		}
//	}
//
//	return res;
//}

int findPairs(vector<int>& nums, int k) {
	if (nums.size() < 2) return {};

	if (k == 0) {
		//统计每个数字出现了几次
		unordered_map<int, int> map;
		for (int i = 0; i < nums.size(); i++) {
			if (map.find(nums[i]) == map.end()) {
				map.emplace(nums[i], 0);
			}
			map[nums[i]]++;
		}

		int count = 0;
		for (auto i : map) {
			if (i.second > 1) count++;
		}
		return count;
	}

	set<int> s;
	for (int i = 0; i < nums.size(); i++) {
		s.insert(nums[i]);
	}


	int res = 0;
	for (set<int>::iterator it = s.begin(); it != s.end(); it++) {
		if (s.find(*it + k) != s.end() && s.find(*it + k) != it) {
			res++;
		}
	}

	return res;
}

int main() {
	vector<int> arr = { 1, 3, 1, 5, 4 };
	cout << findPairs(arr, 0) << endl;
	system("pause");
	return 0;
}
