#include<iostream>
#include<stack>
#include<algorithm>
using namespace std;

//栈底到栈顶从大到排序 底->顶 小->大
void stackInOrder(stack<int>& s) {
	if (s.empty()) return;

	//辅助栈应该是 栈底->栈顶 大->小
	stack<int> help;
	while (!s.empty()) {
		int topValue = s.top();
		s.pop();

		if (help.empty()) help.push(topValue);
		
		//当栈不为空 且栈顶元素小于topValue时
		else {
		while (!help.empty() && help.top() < topValue) {
				s.push(help.top());
				help.pop();
			}
			help.push(topValue);
		}
		
	}

	while (!help.empty()) {
		s.push(help.top());
		help.pop();
	}
}

int main() {
	stack<int> s;
	s.push(2);
	s.push(1);
	s.push(6);
	s.push(7);
	s.push(3);
	s.push(5);
	s.push(4);
	stackInOrder(s);
	while (!s.empty()) {
		cout << s.top() << " ";
		s.pop();
	}
	cout << endl;
	system("pause");
	return 0;
} 
