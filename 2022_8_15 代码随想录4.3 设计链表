#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;


class MyLinkedList {
public:
	struct LinkedList {
		int val;
		LinkedList* next;
		LinkedList(int v) : val(v), next(nullptr) {}
	};

	MyLinkedList() {
		_size = 0;
		_dummy = new LinkedList(-1);
	}

	int get(int index) {
		if (index >= _size || index < 0) return -1;

		LinkedList* cur = _dummy->next;
		while (index--) {
			cur = cur->next;
		}

		return cur->val;
	}

	void addAtHead(int val) {
		LinkedList* temp = _dummy->next;
		_dummy->next = new LinkedList(val);
		_dummy->next->next = temp;
		_size++;
	}

	void addAtTail(int val) {
		LinkedList* cur = _dummy;
		while (cur->next) {
			cur = cur->next;
		}

		cur->next = new LinkedList(val);
		_size++;
	}

	void addAtIndex(int index, int val) {
		if (index > _size || index < 0) return;
		
		LinkedList* cur = _dummy;
		while (index--) {
			cur = cur->next;
		}
		LinkedList* temp = cur->next;
		cur->next = new LinkedList(val);
		cur->next->next = temp;
		_size++;
	}

	void deleteAtIndex(int index) {
		if (index < 0 || index >= _size) return;

		LinkedList* cur = _dummy;
		while (index--) {
			cur = cur->next;
		}
		
		LinkedList* temp = cur->next;
		cur->next = cur->next->next;
		delete temp;
		_size--;
	}

private:
	int _size;
	LinkedList* _dummy;
};

int main() {
	
	return 0;
}
