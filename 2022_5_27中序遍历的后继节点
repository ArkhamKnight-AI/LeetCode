#include<iostream>
using namespace std;

struct TreeNode {
	int val;
	TreeNode* left;
	TreeNode* right;
	TreeNode* father;
	TreeNode(int v) : val(v), left(nullptr), right(nullptr), father(nullptr) {}
};

TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {
	if (root == nullptr) return nullptr;

	//如果p节点有右子树 则后继是右子树的最左节点
	if (p->right != nullptr) {
		p = p->right;
		//是左树不为空 而不是p不为空 这样可以避免p走到空
		while (p->left != nullptr) {
			p = p->left;
		}
		return p;
	}

	//如果p节点没有右子树 且它是父亲的右孩子
	//一直沿着父节点往上找到第一个是它父节点左节点的节点 它的父节点就是后继
	while (p->father && p->father->left != p) {
		p = p->father;
	}
	
	return p->father;
}

int main() {
	TreeNode* head = new TreeNode(2);
	head->left = new TreeNode(1);
	head->right = new TreeNode(3);
	TreeNode* res = inorderSuccessor(head,head -> right);
	return 0;
}
