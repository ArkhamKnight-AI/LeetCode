struct TreeNode {
	int val;
	TreeNode* left;
	TreeNode* right;
	TreeNode(int v) : val(v), left(nullptr), right(nullptr) {}
};

//除了中序遍历不可以 其他遍历方式都可以
//前序遍历非递归写法
TreeNode* invertTree(TreeNode* root) {
	if (root == nullptr) return root;

	stack<TreeNode*> s;
	s.push(root);

	while (!s.empty()) {
		TreeNode* cur = s.top();
		s.pop();

		swap(cur->left, cur->right);
		if (cur->left) s.push(cur->left);
		if (cur->right) s.push(cur->right);
	}

	return root;
}

//前序遍历递归写法
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
	if (root == nullptr) return root;

	swap(root->left, root->right);
	invertTree(root->left);
	invertTree(root->right);

    return root;
}
};
