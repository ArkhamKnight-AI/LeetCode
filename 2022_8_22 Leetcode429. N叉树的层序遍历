class Node {
public:
	int val;
	vector<Node*> children;

	Node() {}

	Node(int _val) {
		val = _val;
	}

	Node(int _val, vector<Node*> _children) {
		val = _val;
		children = _children;
	}
};

vector<vector<int>> levelOrder(Node* root) {
	if (!root) return {};

	vector<vector<int>> res;

	queue<Node*> q;
	q.push(root);

	while (!q.empty()) {
		int size = q.size();

		vector<int> curres;
		for (int i = 0; i < size; i++) {
			Node* cur = q.front(); q.pop();
			curres.push_back(cur->val);
			if (cur->children.size()) {
				for (auto i : cur->children) q.push(i);
			}
		}
		res.push_back(curres);
	}

	
