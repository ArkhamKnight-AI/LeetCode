class Solution {
public:
//判断k是否存在
bool KExist(vector<int>& nums, int k) {
	int L = 0, R = nums.size() - 1;

	while (L <= R) {
		int mid = (L + R) >> 1;
		if (nums[mid] == k) return true;
		else if (nums[mid] > k) {
			R = mid - 1;
		}
		else {
			L = mid + 1;
		}
	}
	return false;
}

//找第一个k
int getFirstK(vector<int>& nums, int k) {
	int L = 0, R = nums.size() - 1;
	int index = -1;

	while (L <= R) {
		int mid = (L + R) >> 1;
		if (nums[mid] == k) {
			index = mid;
			if (mid - 1 >= 0 && nums[mid - 1] != k) {
				return mid;
			}
			else {
				R = mid - 1;
			}
		}
		else if (nums[mid] > k) {
			R = mid - 1;
		}
		else {
			L = mid + 1;
		}
	}

}

//找最后一个k
int getLastK(vector<int>& nums, int k) {
	int L = 0, R = nums.size() - 1;
	int index = -1;

	while (L <= R) {
		int mid = (L + R) >> 1;
		if (nums[mid] == k) {
			index = mid;
			if ((mid + 1 <= nums.size() - 1) && nums[mid + 1] != k) return mid;
			else {
				L = mid + 1;
			}
		}
		else if (nums[mid] > k) {
			R = mid - 1;
		}
		else {
			L = mid + 1;
		}
	}
	return index;
}

//二分查找
int getNumberOfK(vector<int>& nums, int k) {
	if (nums.size() < 0) return 0;
	if (nums.size() == 1) return nums[0] == k ? 1 : 0;
	//首先判断是否有k这个数字
	if (!KExist(nums, k)) return 0;
	
	return getLastK(nums, k) - getFirstK(nums, k) + 1;
}
};



class Solution {
public:
//判断k是否存在
bool KExist(vector<int>& nums, int k) {
	int L = 0, R = nums.size() - 1;

	while (L <= R) {
		int mid = (L + R) >> 1;
		if (nums[mid] == k) return true;
		else if (nums[mid] > k) {
			R = mid - 1;
		}
		else {
			L = mid + 1;
		}
	}
	return false;
}

//找第一个k
int getFirstK(vector<int>& nums, int k) {
	int L = 0, R = nums.size() - 1;
	int index = -1;

	while (L <= R) {
		int mid = (L + R) >> 1;
		if (nums[mid] == k) {
			index = mid;
			if (mid - 1 >= 0 && nums[mid - 1] != k) {
				return mid;
			}
			else {
				R = mid - 1;
			}
		}
		else if (nums[mid] > k) {
			R = mid - 1;
		}
		else {
			L = mid + 1;
		}
	}
    return index;
}

//找最后一个k
int getLastK(vector<int>& nums, int k) {
	int L = 0, R = nums.size() - 1;
	int index = -1;

	while (L <= R) {
		int mid = (L + R) >> 1;
		if (nums[mid] == k) {
			index = mid;
			if ((mid + 1 <= nums.size() - 1) && nums[mid + 1] != k) return mid;
			else {
				L = mid + 1;
			}
		}
		else if (nums[mid] > k) {
			R = mid - 1;
		}
		else {
			L = mid + 1;
		}
	}
	return index;
}

//二分查找
int getNumberOfK(vector<int>& nums, int k) {
	if (nums.size() <= 0) return 0;
	if (nums.size() == 1) return nums[0] == k ? 1 : 0;
	//首先判断是否有k这个数字
	//if (!KExist(nums, k)) return 0;
	
	return getLastK(nums, k) ==-1 && getFirstK(nums, k) == -1 ? 0 : getLastK(nums, k) - getFirstK(nums, k) + 1;
}
};
