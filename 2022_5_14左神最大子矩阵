#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

//最大子数组
int maxSubArray(vector<int>& arr) {
	if (arr.size() < 1) return 0;
	int maxSum = INT_MIN;
	int cur = 0;
	for (int i = 0; i < arr.size(); i++) {
		cur += arr[i];
		maxSum = max(cur, maxSum);
		cur = cur > 0 ? cur : 0;
	}

	return maxSum;
}


//压缩空间技巧 + 最大子数组
int maxSubMatrix(vector<vector<int>>& matrix) {
	if (matrix.size() < 1) return 0;
	int maxSum = INT_MIN;

	//控制在从0~i行开始计算
	for (int i = 0; i < matrix.size(); i++) {
		//控制在i~matrix.size() - 1行计算最大值
		vector<int> help(matrix[0].size());
		for (int j = i; j < matrix.size(); j++) {
			for (int k = 0; k < matrix[0].size(); k++) {
				help[k] += matrix[j][k];
			}
			maxSum = max(maxSum, maxSubArray(help));
		}
	}

	return maxSum;
}

int main() {
	int n;
	cin >> n;

	vector<vector<int>> matrix(n, vector<int>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> matrix[i][j];
		}
	}

	cout << maxSubMatrix(matrix) << endl;
	system("pause");
	return 0;
}
