struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() : val(0), left(nullptr), right(nullptr) {}
	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
	TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

//用数组的写法
void process(TreeNode* root, vector<int>& vec) {
	if (!root) return;

	process(root->left, vec);
	vec.push_back(root->val);
	process(root->right, vec);
}

int getMinimumDifference(TreeNode* root) {
	if (!root) return 0;

	vector<int> vec;
	process(root, vec);

	int res = INT_MAX;
	for (int i = 0; i < vec.size() - 1; i++) {
		res = min(res, vec[i + 1] - vec[i]);
	}
	
	return res;
}


//不用数组的写法
class Solution {
public:
    TreeNode* pre;
    int minval = INT_MAX;

    void process(TreeNode* cur){
        if(!cur) return;

        process(cur->left); 
        if(pre) minval = min(minval, cur->val - pre->val);
        pre = cur;

        process(cur->right);
    }

    int getMinimumDifference(TreeNode* root) {
        if(!root) return 0;
        process(root);
        return minval;
    }
};
