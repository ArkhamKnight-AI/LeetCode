#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

//int minPathSum(vector<vector<int>>& grid) {
//	int M = grid.size();
//	int N = grid[0].size();
//	vector<vector<int>> dp(M, vector<int>(N));
//
//	dp[0][0] = grid[0][0];
//	填好第一列
//	for (int i = 1; i < M; i++) {
//		dp[i][0] = dp[i - 1][0] + grid[i][0];
//	}
//
//	填好第一行
//	for (int i = 1; i < N; i++) {
//		dp[0][i] = dp[0][i - 1] + grid[0][i];
//	}
//
//	for (int i = 1; i < M; i++) {
//		for (int j = 1; j < N; j++) {
//			dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
//		}
//	}
//
//	return dp[M - 1][N - 1];
//}

//空间压缩技巧
int minPathSum(vector<vector<int>>& grid) {
	vector<int> dp(grid[0].size());

	dp[0] = grid[0][0];

	for (int i = 1; i < grid[0].size(); i++) {
		dp[i] = dp[i - 1] + grid[0][i];
	}

	for (int i = 1; i < grid.size(); i++) {
		dp[0] += grid[i][0];
		for (int j = 1; j < grid[0].size(); j++) {
			dp[j] = min(dp[j], dp[j - 1]) + grid[i][j];
		}
	}

	return dp[grid[0].size() - 1];
}

int main() {
	vector<vector<int>> matrix = { {1, 3, 1}, {1, 5, 1}, {4, 2, 1} };
	cout << minPathSum(matrix) << endl;
	system("pause");
	return 0;
}  
