#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

//一个字符串中最长无重复子串的长度
int longestNoReapeat(string s) {

	//用 map 代替了哈希表 记录每个字符上一次出现的位置
	vector<int> map(256);

	//先将所有位置设置为-1
	for (int i = 0; i < 256; i++) {
		map[i] = -1;
	}

	//瓶颈1:当前字符上一次出现的位置
	//当前最长无重复子串的长度
	int cur = 0;
	//瓶颈2:以i-1位置字符结尾的最长无重复子串长度
	int pre = -1;
	//最长无重复子串长度
	int len = 0;

	for (int i = 0; i < s.size(); i++) {
		//求最短长度 就是求最大位置
		pre = max(pre, map[s[i]]);

		//当前最长无重复子串的长度
		cur = i - pre;

		//更新len的值
		len = max(cur, len);

		//更新s[i]在map中的位置
		map[s[i]] = i;
	}

	return len;
}

int main(void) {
	cout << longestNoReapeat("pwwkew") << endl;
	system("pause");
	return 0;
}
