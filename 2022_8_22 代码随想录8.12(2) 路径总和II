struct TreeNode {
	int val;
	TreeNode* left;
	TreeNode* right;
	TreeNode(int v) : val(v), left(nullptr), right(nullptr) {}
};

void process(vector<vector<int>>& result, vector<int>& path, TreeNode* cur, int rest) {
	if (!cur->left && !cur->right && !rest) result.push_back(path);

	if (!cur->left && !cur->right) return;

	if (cur->left) {
		path.push_back(cur->left->val);
		process(result, path, cur->left, rest - cur->left->val);
		path.pop_back();
	}

	if (cur->right) {
		path.push_back(cur->right->val);
		process(result, path, cur->right, rest - cur->right->val);
		path.pop_back();
	}
}

vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
	vector<vector<int>> result;
	if (!root) return result;

	vector<int> path;
	path.push_back(root->val);

	process(result, path, root, targetSum - root->val);

	return result;
}
