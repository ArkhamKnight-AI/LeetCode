#include<iostream>
#include<math.h>
#include<vector>
#include<set>
using namespace std;

bool isPrime(int n) {
	if (n <= 2) return true;

	//平方根
	int base = (int)sqrt((double)n);

	for (int i = 2; i <= base; i++) {
		if (n % i == 0) return false;
	}

	return true;
}

vector<int> primeSet(int n) {
	vector<int> res;
	for (int i = 0; i < n; i++) {
		if (isPrime(i) && i >= 2) res.push_back(i);
	}

	return res;
}

int main() {
	int n;
	cin >> n;

	vector<int> nums(n);
	for (int i = 0; i < n; i++) {
		cin >> nums[i];
	}

	vector<int> res;
	int count = 0;

	for (int i = 0; i < nums.size(); i++) {
		vector<int> primes = primeSet(nums[i]);
		for (int j = 0; j < primes.size(); j++) {
			for (int k = 0; k < primes.size(); k++) {
				for (int l = 0; l < primes.size(); l++) {
					if ((long long)(pow(primes[j], 2)) > nums[i]) break;
					if ((long long)(pow(primes[k], 3)) > nums[i]) break;
					if ((long long)(pow(primes[l], 4)) > nums[i]) break;

					if ((pow(primes[j], 2) + pow(primes[k], 3) + pow(primes[l], 4)) == nums[i]) count++;
				}
			}
		}
		res.push_back(count);
	}

	for (auto i : res) {
		cout << i << endl;
	}

	return 0;
}
