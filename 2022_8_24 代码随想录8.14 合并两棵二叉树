struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() : val(0), left(nullptr), right(nullptr) {}
	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
	TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

//递归方法
TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
	if (!root1 && !root2) return nullptr;

	if (!root1) return root2;
	if (!root2) return root1;

	TreeNode* root = new TreeNode(root1->val + root2->val);

	root->left = mergeTrees(root1->left, root2->left);
	root->right = mergeTrees(root1->right, root2->right);

	return root;
}

//非递归方法
TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
	if (!root1 && !root2) return nullptr;
	if (!root1) return root2;
	if (!root2) return root1;

	queue<TreeNode*> q;
	q.push(root1);
	q.push(root2);

	while (!q.empty()) {
		TreeNode* node1 = q.front(); q.pop();
		TreeNode* node2 = q.front(); q.pop();

		node1->val += node2->val;

		if (node1->left && node2->left) {
			q.push(node1->left);
			q.push(node2->left);
		}

		if (node1->right && node2->right) {
			q.push(node1->right);
			q.push(node2->right);
		}

		if (!node1->left && node2->left) {
			node1->left = node2->left;
		}

		if (!node1->right && node2->right) {
			node1->right = node2->right;
		}
	}

	return root1;
}
