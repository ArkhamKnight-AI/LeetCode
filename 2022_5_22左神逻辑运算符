#include<iostream>
#include<vector>
#include<string>
using namespace std;

//使字符串express的运算结果为desired的方法数
int process(string& s, bool desired, int L, int R) {
	//base case L = R
	if (L == R) {
		if (s[L] == '1') {
			return desired ? 1 : 0;
		}
		else {
			return desired ? 0 : 1;
		}
	}
	
	int res = 0;

	//如果希望的是true
	if (desired) {
		//L != R 在L...i - 1范围上找有多少种为true的方法 乘以 i + 1...R范围上有多少种为true的方法;
		//L位置上是一个数   L + 1是符号位
		for (int i = L + 1; i < R; i += 2) {
			switch (s[i]) {
			//如果i位置上的字符是| 左右两侧只要有一侧为真即可
			case '|': res += process(s, true, L, i - 1) * process(s, true, i + 1, R);
				res += process(s, true, L, i - 1) * process(s, false, i + 1, R);
				res += process(s, false, L, i - 1) * process(s, true, i + 1, R);
				break;

			//如果i位置上的字符是& 左右两侧都为真即可
			case '&':
				res += process(s, true, L, i - 1) * process(s, true, i + 1, R);
				break;

			//如果i位置上的字符是^ 左右两侧一侧为真一侧为假
			case '^':
				res += process(s, true, L, i - 1) * process(s, false, i + 1, R);
				res += process(s, false, L, i - 1) * process(s, true, i + 1, R);
				break;
			}
		}
	}

	//如果希望的是false
	else {
		for (int i = L + 1; i < R; i += 2) {
			switch (s[i]) {
				//如果i位置上的字符是| 左右两侧均为假
			case '|': res += process(s, false, L, i - 1) * process(s, false, i + 1, R);
				break;

				//如果i位置上的字符是& 左右两侧一侧为假一侧为真 或两侧均假 即可
			case '&':
				res += process(s, true, L, i - 1) * process(s, false, i + 1, R);
				res += process(s, false, L, i - 1) * process(s, true, i + 1, R);
				res += process(s, false, L, i - 1) * process(s, false, i + 1, R);
				break;

				//如果i位置上的字符是^ 左右两侧真假相同 即可
			case '^':
				res += process(s, true, L, i - 1) * process(s, true, i + 1, R);
				res += process(s, false, L, i - 1) * process(s, false, i + 1, R);
				break;
			}
		}
	}
	
	return res; 
}

//检查表达式是否有效
bool isValid(string& s) {
	if (s.size() % 2 == 0) return false;

	for (int i = 0; i < s.size(); i += 2) {
		//只有同时都不满足这些条件 才返回false
		if ((s[i] != '0') && (s[i] != '1')) return false;
	}

	for (int i = 1; i < s.size(); i += 2) {
		//只有同时都不满足这些条件 才返回false
		if ((s[i] != '&') && (s[i] != '|') && (s[i] != '^')) return false;
	}

	return true;
}

int string2Desired(string& s, bool desired) {
	//如果字符串无效 返回0
	if (s.size() < 1 || !isValid(s)) return 0;
	return process(s, desired, 0, s.size() - 1);
}


int main() {
	string s = "1^0|0|1";
	cout << string2Desired(s, false) << endl;
	system("pause");
	return 0;
} 
